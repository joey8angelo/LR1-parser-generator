S > FUNCTIONS
S > %
FUNCTIONS > FUNCTION FUNCTIONS
FUNCTIONS > FUNCTION
FUNCTION > func ident ( ARGUMENTS ) : int { STATEMENTS }
ARGUMENTS > ARGUMENT , ARGUMENTS
ARGUMENTS > ARGUMENT
ARGUMENT > ident : int
STATEMENTS > STATEMENT STATEMENTS
STATEMENTS > %
STATEMENT > IF
STATEMENT > statement ;
STATEMENT > DECLARATION ;
IF > if ( BOOL_EXPR ) { STATEMENTS } ELSE
ELSE > else { STATEMENTS }
ELSE > %
DECLARATION > ident : int DECLARATION'
DECLARATION' > = EXPR
DECLARATION' > %
EXPR > EXPR + TERM
EXPR > EXPR - TERM
EXPR > TERM
TERM > TERM * FACTOR
TERM > TERM / FACTOR
TERM > FACTOR
FACTOR > ( EXPR )
FACTOR > num
FACTOR > ident
BOOL_EXPR > BOOL_EXPR or RELATION_AND
BOOL_EXPR > RELATION_AND
RELATION_AND > RELATION_AND and RELATION
RELATION_AND > RELATION
RELATION > EXPR COMP EXPR
RELATION > true
RELATION > false
RELATION > [ BOOL_EXPR ]
COMP > >
COMP > <
COMP > ==
COMP > >=
COMP > <=
COMP > !=